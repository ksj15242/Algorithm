class Solution {
public:
    struct Compare {
        bool operator()(const pair<int, string>& a,
                        const pair<int, string>& b) {
            if (a.first == b.first)
                return a.second < b.second;
            return a.first > b.first;
        }
    };

    vector<string> topKFrequent(vector<string>& words, int k) {

        unordered_map<string, int> um;
        for (const auto& word : words) {
            um[word]++;
        }

        priority_queue<pair<int, string>, vector<pair<int, string>>, Compare>
            pq;
        for (const auto& [word, count] : um) {
            pq.push({count, word});
            if (pq.size() > k)
                pq.pop();
        }

        vector<string> vec;
        while (!pq.empty()) {
            const auto [count, word] = pq.top();
            vec.push_back(word);
            pq.pop();
        }

        reverse(vec.begin(), vec.end());

        return vec;
    }
};
